- Overall
  - Unsupported syntax    
    - bit vectors    
    - reals, /, **, int(), real(), decimal/float litearls
    - call * := Q(x, y), call forall to a procedure with out-parameters
    - empty map domains x: []int    
    - code expression
  - Optimization: e.g. better data structures instead of lists  
  - Do not throw away attributes and triggers
  - Dynamic assertion (loop invariant) inference (testing + statistical test)?

- Type checker
  - Data type for type errors (will be easier to evaluate test results)
  -> Annotate AST with expr types (v0.2)
  
- Interpreter
  - Backtracking
    - Exhaustive generator for maps
    - Remove limitation on entry points
    - Random generator?
    - Remove tester?
  - Remove sepaation between global and local variables (get from the context)?
  - Support calls to procedures with no implementation
  - Lambda expressions: cause problems with equality of Value (needed for evaluation of equality and for map acceses)  
  - Turn source positions into spans; use the end of the span to report postcondition violations  
  - User-defined types
  - Extends ordering
  - Extract function constraints from axioms
  - Constraint solving
  - With better non-determinism: treat maps like functions in testing, and do not generate all possible values for them explicitly?
  - Call forall
  
- Tester
  - Which failing test cases should be considered unique in summaries? If a postcondition or inline assertion is violated it's enough to comare the error, if a precondition is violated we need the caller. Preconditions should be checked at the call site?
  
- User interface
  - pass more information with failures other than spec violations, so that relevant variables can be determined
  - settings for disabling checking of different specs
  - settings for bounding domains to be checked in quantified expressions
  - interactive sessions
  - debugger
