- Overall
	- New syntax
	- Bit vectors
	- Do not throw away attributes and triggers

- Interpreter
	- Save old variables when entering the procedure
	- Normalize assignments during basic block transformation?
	- Checking contracts
	- Check axioms and where clauses when choosing a value
	- Better error reporting (add locations, call stacks, use pretty print instead of message?)
	- Better interface (show instance for Value, allow different entry points?)
	- Quantified expressions
	- Create package and some doc
-> Release 0.1	
	- Extract function definitions from axioms
	- User-defined types
	- Extends ordering
	- Backtracking (logicT monad?)
	- Constraint solving
	
Notes:
- Where clauses of in-parameters: according to the manual can mention out-parameters, but actually can't
- Breaks with labels. a: b: while(...) {break a;} is not allowed in the implementation (as is l: break l;), but seems to be allowed by the manual.
- The syntax of WhereClause is missing in the boogie manual

Unsupported syntax:
- call * := Q(x, y);
- empty map domains x: []int