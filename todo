- Figure out why QSortPartial is slower
- Try forcing expressions

- Overall
  - Unsupported syntax    
    - bit vectors    
    - reals, /, **, int(), real(), decimal/float litearls
    - call * := Q(x, y), call forall to a procedure with out-parameters
    - empty map domains x: []int    
    - code expression
  - Optimization: e.g. better data structures instead of lists  
  - Do not throw away attributes and triggers
  - Dynamic assertion (loop invariant) inference (testing + statistical test)?

- Type checker
  - Use semantic representation of types not just for comparison?
  - Data type for type errors (will be easier to evaluate test results)
  - Use lenses for Context?
  - Annotate AST with expr types
  
- Interpreter
  - Try to remove constraint repetition from BubbleSort
  - Force boolean expressions instead of evaluating them to save on backtracking
  - Merge constraints with the same guard?

  - Extract map constraints from nonsimple arguments
  - User interface
    - Put back map dereferencing
    - Command line options (e.g. generate first n distinct errors)
  - Better case extraction for map constraints (BDD?)
  
  - Error reporting: when violated spec has logical vars, output their values  
  - Refactor executeLocally, execCall and execProcedure (and saveOld/restoreOld?)
  - Refactor evalVar, setAnyVar and so on, so that there is a unified meachism to lookup a name in the type context
  - Lazy initialization of arguments (in execLocally only copy those args that are already initialized, at the end propage the initizlization back with assume)
  - Extends ordering
  - Turn source positions into spans; use the end of the span to report postcondition violations  
    
- User interface
  - settings for disabling checking of different specs
  - interactive sessions
  - debugger: generated logs and traverse them?
