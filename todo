- Overall
  - New syntax
    - coercions
    - lambda expressions
    - code expression?
    - reals, /, **, int(), real(), decimal/float litearls
  - Optimization: e.g. better data structures instead of lists
  - Bit vectors
  - Do not throw away attributes and triggers

- Type Checker
  - Rename type variables in pInstance
- Interpreter
  - Refactor types context: get rid of global/local variable distinction, use state?
  - First take on exhaustive/random testing (randomness/backtracking only in the outermost call)
  - Create package and some doc (+ examples: sum_max, sorting/binary_search)
-> Release 0.1
  - Turn source positions into spans; use the end of the span to report postcondition violations  
  - User-defined types
  - Extends ordering
  - Extract function and constant constraints from axioms
  - Backtracking (logicT monad?)
  - User interface
    - output local state with runtime error (restricted to the variables in the failed assertion)
    - allow choosing entry point and passing command line args
    - settings for disabling checking of different specs
    - settings for bounding domains to be checked in quantified expressions      
  - Make Value/Execution types generic (or at least eval and exec?). This will allow support for abstract interpretation and symbolic execution.  
  - Constraint solving
  - What to do with call forall?
  - Interactive sessions
  
  
Notes:
- Where clauses of in-parameters: according to the manual can mention out-parameters, but actually can't
- Breaks with labels. a: b: while(...) {break a;} is not allowed in the implementation (as is l: break l;), but seems to be allowed by the manual.
- The syntax of WhereClause is missing in the boogie manual

Unsupported syntax:
- call * := Q(x, y);
- empty map domains x: []int