- Overall
  - Unsupported syntax    
    - bit vectors    
    - reals, /, **, int(), real(), decimal/float litearls
    - call * := Q(x, y), call forall to a procedure with out-parameters
    - empty map domains x: []int    
    - code expression
  - Optimization: e.g. better data structures instead of lists  
  - Do not throw away attributes and triggers
  - Dynamic assertion (loop invariant) inference (testing + statistical test)

- Type checker
  - Fix where clauses:
    - Disallow old
    - Out-params should not be in scope
  - Type constraint solving (HM?) to allow generic return types in functions
  - Data type for type errors (will be easier to evaluate test results)
  - Annotate AST with expr types
  - Use state?
  
- Interpreter
  - Support calls to procedures with no implementation
  - Turn source positions into spans; use the end of the span to report postcondition violations  
  - Backtracking (logicT monad?)  
  - User-defined types
  - Extends ordering
  - Extract function and constant constraints from axioms
  - Constraint solving
  - Lambda expressions: cause problems with equality of Value (needed for evaluation of equality and for map acceses);
      forces to have "shalow" Eq, Ord on types and expressions, so that map values can be stored as map keys
      or to create a named function per lambda expression
  - With better non-determinism: treat maps like functions in testing, and do not generate all possible values for them explicitly?
  - Call forall
  
- Tester
  - Which failing test cases should be considered unique in summaries? If a postcondition or inline assertion is violated it's enough to comare the error, if a precondition is violated we need the caller. Preconditions should be checked at the call site?
  
- User interface
  - pass more information with failures other than spec violations, so that relevant variables can be determined
  - settings for disabling checking of different specs
  - settings for bounding domains to be checked in quantified expressions
  - interactive sessions
  - debugger
