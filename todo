- Overall
	- New syntax
	- Bit vectors
	- Do not throw away attributes and triggers

- Interpreter
	- Generate pre/post checks together with basic block transformation?
	- Have an intermediate context when calling a procedure, with signature names (would allow reporting pre/post violations with sig names)?
	- Refactor types context: get rid of global/local variable distinction or use state?
	- When checking where clauses, also report the line where variable havoc occurs, not only the line of the where clause
	- Quantified expressions
	- Create package and some doc
-> Release 0.1	
	- Extract function and constant definitions/constraints from axioms
	- User-defined types
	- Extends ordering
	- Backtracking (logicT monad?)
	- Constraint solving
	- What to do with call forall?
	- User interface
		- allow choosing entry point and passing command line args
		- settings for disabling different checking of different specs
		- output local state with runtime error?
	- Interactive sessions
	- When procedure and implementation have different parameter names, pre/post violations are reported with implementation names; is that ok?
	
Notes:
- Where clauses of in-parameters: according to the manual can mention out-parameters, but actually can't
- Breaks with labels. a: b: while(...) {break a;} is not allowed in the implementation (as is l: break l;), but seems to be allowed by the manual.
- The syntax of WhereClause is missing in the boogie manual

Unsupported syntax:
- call * := Q(x, y);
- empty map domains x: []int